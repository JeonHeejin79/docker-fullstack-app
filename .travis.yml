language: generic

sudo: required

services:
  - docker # 앱을 도커 환경에서 실행하고 있으니 Travis Ci 에게 도커환경으로 만들 것이라고 선언.

before_install:
  - docker build -t joneheejin/react-test-app -f ./frontend/Dockerfile.dev ./frontend # 이미지 생성

script:
  - docker run -e CI=true joneheejin/react-test-app npm run test # 테스트 수행

after_success:
  # 각각의 운영버전 이미지 빌드
  - docker build -t joneheejin/docker-frontend -f ./frontend/Dockerfile.prd ./frontend
  - docker build -t joneheejin/docker-backend -f ./backend/Dockerfile.prd ./backend
  - docker build -t joneheejin/docker-proxy ./proxy
  # 도커 허브에 로그인
  - echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_ID" --password-stdin
  # 빌드된 이미지들을 도커 허브에 Push 하기
  - docker push joneheejin/docker-frontend
  - docker push joneheejin/docker-backend
  - docker push joneheejin/docker-proxy

# 배포 부분
deploy:
  provider: elasticbeanstalk # 외부 서비스 표시 (s3,elasticbeanstalk, firebase 등)
  region: "ap-northeast-2" # 현재 사용하고 있는 AWS의 서비스가 위치하고 있는 물리적 장소
  app: "docker-fullstack-app" # 생성된 애플리케이션의 이름 
  env: "Docker-fullstack-app-env" # DockerFullstackApp-env
  buckect_name: "elasticbeanstalk-ap-northeast-2-415603219820" # 해당 elasticbeanstalk 을 위한 s3 버켓 이름
  bucket_path: "docker-fullstack-app" # 어플리케이션의 이름 (app) 과 동일 ex) elasticbeanstalk-app
  on:
    branch: master # 어떤 브랜치에 Push할떄 AWS에 배포를 

  access_key_id: $AWS_ACCESS_KEY
  secret_access_key: $AWS_SECRET_ACCESS_KEY

